@page "/Search"
@page "/Search/{Query}"

@using System.Linq 

@inject IContractInteractionService _contract
@inject NftClientService _client
@inject IUserService _userService
@inject NavigationManager _navManager
@inject IConfiguration _config

@if (!_loading)
{
    <div class="container">

        <div class="input-group" style="margin-top: 15px;height: 50px;">
            <span class="input-group-text">Explore More</span>
            <input class="form-control" type="text" placeholder="Search For NFTs, Creators, Listings, Etc." @bind="Query">
            <button class="btn btn-primary" type="button" @onclick="SearchForResults">Search</button>
        </div>

        @if (_userResults.Count > 0)
        {
            <div class="row">
                <h3 class="text-primary">Users</h3>
                @foreach (var user in _userResults)
                {
                    <div class="card" style="width: 18rem;">
                        @if (user.ProfilePictureUri != null)
                        {
                            <img class="card-img-top" src="@user.ProfilePictureUri">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@user.Address</h5>
                            @if (user.Name != null && user.Name.Count() > 0)
                            {
                                <p class="card-text">@user.Name</p>
                            }
                        </div>
                        <div class="card-footer d-flex">
                            <a href="@("Profile/" + user.Address)" class="btn btn-primary flex-fill">View</a>
                        </div>
                    </div>
                }
            </div>
        }

        @if (_tokenResults.Count > 0)
        {
            <div class="row">
                <h3 class="text-primary">Tokens</h3>
                @foreach (var token in _tokenResults)
                {
                    <WatchNftComponent TokenId="@token.NftId"/>
                }
            </div>
        }

    </div>
}
else
{
    <LoadingPage/>
}

@code {
    [Parameter]
    public string Query { get; set; }

    private List<User> _userResults = new List<User>();
    private List<LocalWatchRecord> _tokenResults = new List<LocalWatchRecord>();

    private bool _loading = false;

    protected override void OnInitialized()
    {
        if (Query != null && Query.Count() > 0)
            SearchForResults();
    }

    private async void SearchForResults()
    {
        _loading = true;
        StateHasChanged();

        _userResults.Clear();
        _tokenResults.Clear();

        var allUsers = await _userService.GetAllUsers();
        @*var allAuctions = await _contract.GetAllAuctions();*@
        @*var allListings = await _contract.GetAllListings();*@
        var allNfts = (await _contract.GetAllNfts()).Where(x => x.ChainId == int.Parse(_config["ChainId"]));

        // Nfts
        @*List<string> tokensMatchingId = allNfts.Where(x => x.NftId.ToLower() == Query.ToLower()).ToList();*@
        _tokenResults.AddRange(from x in allNfts
                                where x.NftId.ToLower() == Query.ToLower()
                                select x);
        // NFT Serial Numbers & Watch Metadata
        foreach(var nft in allNfts)
        {
            if (nft.Serial.ToLower() == Query.ToLower())
                _tokenResults.Add(nft);
        }

        StateHasChanged();

        // Users
        var usersMatchingAddress = allUsers.Where(x => x.Address.ToLower() == Query.ToLower());
        var usersMatchingName = allUsers.Where(x => x.Name != null && x.Name.ToLower().Contains(Query.ToLower()));
        _userResults.AddRange(usersMatchingAddress.ToList());
        _userResults.AddRange(usersMatchingName.ToList());
        _loading = false;
        StateHasChanged();

    }

}