@using Nethereum.Web3

@inject IContractInteractionService _contract
@inject NftClientService _client
@inject IListingService _auctionDatabaseService
@inject IUserService _userDatabaseService
@inject NavigationManager _navManager

@{
    List<List<LocalListingRecord>> itemsGrouped = new List<List<LocalListingRecord>>();
    int iteration = 0;
    int currentIndex = 0;
    itemsGrouped.Add(new List<LocalListingRecord>());
    foreach(var item in _items)
    {
        if(iteration % 3 == 0)
        {
            itemsGrouped.Add(new List<LocalListingRecord>());
            currentIndex++;
        }
        itemsGrouped[currentIndex].Add(item);
        iteration++;
    }
}
@foreach(var itemGroup in itemsGrouped)
{
    <div class="card-group">
        @foreach(var item in itemGroup)
        {
            <div class="card shadow nft-container">
                <img class="card-img-top" src="@("https:ipfs.io/ipfs/" + item.ImageCID)" height="150">
                <div class="card-body text-center">
                    <h4 class="text-primary card-title">@item.Title</h4>
                    <h6 class="text-muted card-subtitle mb-2 text-secondary">@item.SellerAddress</h6>
                    <p class="text-secondary card-text" style="font-size: 20px;filter: brightness(200%) contrast(100%);">Watch For Sale...</p>
                </div>
                <div class="card-footer text-center">
                    @{
                        string address;
                        if(item.ListingType == ListingType.AUCTION)
                        {
                            address = "/Auction/";
                        }
                        else
                        {
                            address = "/Listing/";
                        }
                        address += item.ListingAddress;
                    }
                    <button class="btn btn-primary" type="button" style="width: 250px;" @onclick="@(() => _navManager.NavigateTo(address))">View</button>
                </div>
            </div>
        }
    </div>
}

@code {

    private List<LocalListingRecord> _items = new List<LocalListingRecord>();

    protected override async Task OnInitializedAsync()
    {
        var allProducts = await _contract.GetAllProducts();
        Dictionary<LocalListingRecord, int> listingViews = new Dictionary<LocalListingRecord, int>();

        foreach(var product in allProducts)
        {
            var views = (await _auctionDatabaseService.GetAuctionMetadata(product.ListingAddress)).Views;
            listingViews.Add(product, views);
        }

        _items = (from product in listingViews.Keys
                let views = listingViews[product]
                orderby views
                descending
                select product).Take(10).ToList();

        StateHasChanged();
    }
}
