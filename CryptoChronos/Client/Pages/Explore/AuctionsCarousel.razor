@inject IContractInteractionService _contract
@inject IAuctionService _auctionDatabaseService
@inject IUserService _userService
@inject NavigationManager _navManager
@inject IJSRuntime _jsRuntime

<div class="carousel slide" data-bs-ride="carousel" id="carousel">
    <div class="carousel-inner">
      


        @**
        @for(int i = 0; i < _totalSlides; i++)
        {

            string className = "carousel-item";
            if (i == _activeSlide)
                className = "carousel-item active";

            <div class="@className">
                <div class="row">
                    <div class="card-group">
                        <div class="col-1"></div>
                        <div class="col-10">
                            <div class="card-group">
                                @foreach (var container in _auctionDataContainers[i])
                                {
                                    <div class="card" @onclick="@(() => _navManager.NavigateTo(container.Link))">
                                        <img class="card-img-top w-100 d-block" src="@container.WatchImageUri">
                                        <div class="card-body text-center">
                                            <h4 class="card-title">@container.Title</h4>
                                        </div>
                                        <div class="card-footer">
                                            <small class="text-muted">Footer</small>
                                        </div>
                                    </div>
                                }
                            </div>
                            </div>
                        <div class="col-1"></div>
                    </div>
                </div>
            </div>
        }
        *@

           
        <div class="carousel-item active">
            <div class="row">
                <div class="card-group">
                    <div class="col-1"></div>
                        <div class="col-10">
                            <div class="card-group">
                                @foreach(var container in _auctionDataContainers)
                                {
                                    <div class="card m-1" @onclick="@(() => _navManager.NavigateTo(container.Link))">
                                        <img class="card-img-top w-100 d-block" src="@container.WatchImageUri">
                                        <div class="card-body text-center">
                                            <h4 class="card-title">@container.Title</h4>
                                        </div>
                                        <div class="card-footer d-flex">
                                            <a class="btn btn-primary flex-fill justify-content-center" href="@container.Link">VIEW</a>
                                        </div>
                                    </div>
                                    }
                                </div>
                            </div>
                        <div class="col-1"></div>
                    </div>
                </div>
            </div>

                   <div class="carousel-item active">
            <div class="row">
                <div class="card-group">
                    <div class="col-1"></div>
                        <div class="col-10">
                            <div class="card-group">
                                @foreach(var container in _auctionDataContainers)
                                {
                                    <div class="card m-1" @onclick="@(() => _navManager.NavigateTo(container.Link))">
                                        <img class="card-img-top w-100 d-block" src="@container.WatchImageUri">
                                        <div class="card-body text-center">
                                            <h4 class="card-title">@container.Title</h4>
                                        </div>
                                        <div class="card-footer d-flex">
                                            <a class="btn btn-primary flex-fill justify-content-center" href="@container.Link">VIEW</a>
                                        </div>
                                    </div>
                                    }
                                </div>
                            </div>
                        <div class="col-1"></div>
                    </div>
                </div>
            </div>

                   <div class="carousel-item active">
            <div class="row">
                <div class="card-group">
                    <div class="col-1"></div>
                        <div class="col-10">
                            <div class="card-group">
                                @foreach(var container in _auctionDataContainers)
                                {
                                    <div class="card m-1" @onclick="@(() => _navManager.NavigateTo(container.Link))">
                                        <img class="card-img-top w-100 d-block" src="@container.WatchImageUri">
                                        <div class="card-body text-center">
                                            <h4 class="card-title">@container.Title</h4>
                                        </div>
                                        <div class="card-footer d-flex">
                                            <a class="btn btn-primary flex-fill justify-content-center" href="@container.Link">VIEW</a>
                                        </div>
                                    </div>
                                    }
                                </div>
                            </div>
                        <div class="col-1"></div>
                    </div>
                </div>
            </div>

    </div>

    <div>
        <a class="carousel-control-prev" 
            href="#carousel"
            role="button" 
            data-slide="prev">
            <span class="carousel-control-prev-icon"></span>
            <span class="visually-hidden">Previous</span>
        </a>
        <a class="carousel-control-next" 
            href="#carousel"    
            role="button"
            data-slide="next">
            <span class="carousel-control-next-icon"></span>
            <span class="visually-hidden">Next</span>
        </a>
    </div>

</div>


@code {
    //private List<List<TrendingAuction>> _auctionDataContainers = new List<List<TrendingAuction>>();
    private List<TrendingAuction> _auctionDataContainers = new List<TrendingAuction>();

    private int _activeSlide = 0;
    private int _totalSlides = 1;

    private struct TrendingAuction
    {
        public string Title {  get; set; }
        public string Seller { get; set;}
        public string Link { get; set; }
        public Watch Watch { get; set; }
        public string WatchImageUri { get; set; }
        public string Price { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var auctions = (await _contract.GetAllAuctions());

        //_auctionDataContainers.Add(new List<TrendingAuction>());

        int containersAdded = 0;
        foreach (var auction in auctions)
        {
            if (containersAdded == 5)
            {
                //_totalSlides++;
                containersAdded = 0;
                //_auctionDataContainers.Add(new List<TrendingAuction>());
            }
            try
            {
                var state = await _contract.GetAuctionState(auction.Address);
                if (state != AuctionState.ACTIVE)
                    continue;
                var tokenId = auction.TokenId;
                var tokenUri = await _contract.GetTokenUri(tokenId);
                var watchJson = await _contract.GetNftMetadata(tokenUri);
                var watch = JsonConvert.DeserializeObject<Watch>(watchJson);
                var imgUri = "https://ipfs.io/ipfs/" + watch.ImageCID;
                string link = "/auction/" + auction.Address;
                string currentBid = (await _contract.GetHighestBid(auction.Address)) ?? "0";
                string seller = (await _userService.GetUser(auction.SellerAddress)).Name ?? auction.SellerAddress;


                TrendingAuction container = new TrendingAuction()
                    {
                        Link = link,
                        Price = currentBid,
                        Seller = seller,
                        Title = watch.Manufacturer + " " + watch.Model,
                        Watch = watch,
                        WatchImageUri = imgUri
                    };

                _auctionDataContainers.Add(container);
                containersAdded++;
            }
            catch (Exception) { }
        }

        await _jsRuntime.InvokeVoidAsync("startCarousels");
        StateHasChanged();
    }
     
    private void Previous()
    {
        if (_activeSlide > 0)
            _activeSlide--;
        else
            _activeSlide = _totalSlides - 1;
    }

    private void Next()
    {
        if (_activeSlide < _totalSlides)
            _activeSlide++;
        else
            _activeSlide = 0;
    }
}
