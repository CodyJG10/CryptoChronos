@page "/account"

@using System.Collections.ObjectModel

@inject NavigationManager _navManager
@inject IUserService _userService
@inject NftClientService _client
@inject IContractInteractionService _contract
@inject IJSRuntime _js

@if (!_loading)
{
    <div class="container rounded bg-secondary mt-5 mb-5">
        <div class="row">
            <div class="col-md-4 border-right">
                <div class="d-flex flex-column align-items-center text-center p-3 py-5">
                    @if (_profilePictureUri == null || _profilePictureUri == "")
                    {
                        <img class="rounded-circle mt-5" width="150" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg">
                    }
                    else
                    {
                        <img class="rounded-circle mt-5" width="150px" height="150px" src="@_profilePictureUri">
                    }
                    <button class="btn btn-primary" @onclick="@(() => 
                                {
                                    _showProfilePictureModal = true;
                                    StateHasChanged();
                                })">Upload Profile Picture</button>
                    <span class="text-black-50" style="font-size: 12px;">@_address</span>
                    <span class="text-black-50">
                        @if (_name == null)
                        {
                            @("No name saved yet")
                        }
                        else
                        {
                            @_name
                        }
                    </span>
                    <span class="text-black-50">
                        @if (_email == null)
                        {
                            @("No email saved yet")
                        }
                        else
                        {
                            @_email
                        }
                    </span>
                </div>
            </div>
            <div class="col-md-8 border-right">
                <div class="p-3 py-5">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="text-right">Profile Settings</h4>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <label class="labels">Name</label>
                            <input type="text" class="form-control" placeholder="enter username" @bind="_name">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <label class="labels">Email</label>
                            <input type="text" class="form-control" placeholder="enter email" @bind="_email">
                        </div>
                    </div>
                    <div class="mt-5 text-center">
                        <button class="btn btn-primary profile-button" type="button" @onclick="Save">Save Profile</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (_showProfilePictureModal)
    {
        <div class="modal show" tabindex="-1" style="display:block">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Upload Profile Picture</h5>
                    </div>
                    <div class="modal-body">
                        <p>Upload your profile picture</p>
                        <div class="form-group">
                            <label>Image</label>
                            <InputFile OnChange="@LoadFiles" class="form-control"/>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-success" @onclick="UploadProfilePicture">Save</button>
                            <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="@(() => {
                        _showProfilePictureModal = false;
                        StateHasChanged();
                    })">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <LoadingPage/>
}
@code {
    private string _name;
    private string _email;
    private string _address;
    private IBrowserFile _profilePicture;
    private string _profilePictureUri;

    private bool _loading = true;

    private bool _showProfilePictureModal = false;

    protected override async void OnInitialized()
    {
        await _js.InvokeVoidAsync("BlazorSetTitle", "Watch NFT - Account");

        if(!await _client.TransactionHandler.IsSiteConnected())
        {
            _navManager.NavigateTo("/login");    
        }

        _address = await _client.TransactionHandler.GetSelectedAddress();
        var user = await _userService.GetUser(_address);
        if(user == null)
        {
            StoreNewUser();

        }
        else
        {
            if(user.Email != null)
                _email = user.Email;
            if(user.Name != null)
                _name = user.Name;   
            if(user.ProfilePictureUri != null)
                _profilePictureUri = user.ProfilePictureUri;
            _loading = false;
            StateHasChanged();
        }
    }

    private async void StoreNewUser()
    {
        var address = await _client.TransactionHandler.GetSelectedAddress();
        User user = new User()
        {
            Address = address.ToLower(),
            Id = 0,
            Email = "",
            Name = "",
            ProfilePictureUri = "",
            RoleClaims = new List<UserRoleClaims>()
        };
        await _userService.CreateUser(user);
        _loading = false;
        StateHasChanged();

    }

    private async void Save()
    {
        var user = await _userService.GetUser(_address);
        user.Name = _name;
        user.Email = _email;
        await _userService.EditUser(user);
    }

    private void LoadFiles(InputFileChangeEventArgs e) => _profilePicture = e.File;

    private async void UploadProfilePicture()
    {
        string address = await _client.TransactionHandler.GetSelectedAddress();
        await _userService.SaveUserProfilePicture(_profilePicture, address);
        var user = await _userService.GetUser(_address);
        if(user.ProfilePictureUri != null)
            _profilePictureUri = user.ProfilePictureUri;
        _showProfilePictureModal = false;
        _navManager.NavigateTo(_navManager.Uri, forceLoad: true);
    }
}
