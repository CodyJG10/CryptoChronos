@page "/CreateAuction"

@inject NavigationManager _navManager
@inject NftClientService _client
@inject IContractInteractionService _contract
@inject IListingService _auctionService
@inject IUserService _userService


<div class="container">
    <div class="dropdown">
        <button class="btn btn-primary dropdown-toggle" aria-expanded="false" data-bs-toggle="dropdown" type="button">Select Unit</button>
        <div class="dropdown-menu dropdown-menu-start">
            <a class="dropdown-item" href="#">ETH</a>
            <a class="dropdown-item" href="#">GWEI</a>
            <a class="dropdown-item" href="#">WEI</a>
        </div>
    </div>

    <input placeholder="Token Id" @bind="_tokenId"/>
    <input placeholder="Payout Address" @bind="_payTo"/>
    <input placeholder="Bid Increment" @bind="_bidIncrease" />
    <button class="btn btn-primary" @onclick="Create">Create</button>
</div>

@if (_loading)
{
    <div class="modal show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Loading...</h5>
                </div>
                <div class="modal-body">
                    <p>Creating Listing</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string _bidIncrease;
    private bool _loading = false;
    private string _payTo;
    private string _tokenId;

    protected override async Task OnInitializedAsync()
    {
        if (!await _userService.IsInRole("Owner", await _client.TransactionHandler.GetSelectedAddress()))
            _navManager.NavigateTo("/Unauthorized");
    }

    public async void Create()
    {
        _loading = true;
        StateHasChanged();
        var operatorAddress = await _client.TransactionHandler.GetSelectedAddress();
        var tokenUri = await _contract.GetTokenUri(_tokenId);
        var watch = JsonConvert.DeserializeObject<Watch>(await _contract.GetNftMetadata(tokenUri));
        CreateAuctionModel model = new CreateAuctionModel()
        {
            BidIncrement = _bidIncrease,
            OperatorAddress = operatorAddress,
            PayTo = _payTo,
            TokenId = _tokenId,
            SellerAddress = _payTo,
            Watch = watch
        };
        var address = await _contract.CreateAuction(model);
        AuctionMetadata metadata = new AuctionMetadata()
            {
                Id = 0,
                AuctionAddress = address,
                Views = 0
            };
        await _auctionService.CreateAuctionMetadata(metadata);
        _loading = false;
        StateHasChanged();
        _navManager.NavigateTo("/auction/" + address);
    }
}