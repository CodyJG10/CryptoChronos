@page "/createlisting"

@using System.Numerics

@inject NftClientService _client
@inject IContractInteractionService _contract
@inject IListingService _auctionService
@inject IUserService _userService
@inject NavigationManager _navManager

<h3>Create Listing</h3>

<div class="container">
    <div class="form-group">
       
        <Dropdown TItem="string">
            <InitialTip>This is a dropdown list</InitialTip>
            <ChildContent>
                <div class="dropdown-divider"></div>
                @foreach(var watchName in _nfts)
                {
                    <DropdownListItem Item="@watchName">@watchName</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>
    </div>

    <input placeholder="Token Id"@bind="_tokenId"/>
    <input placeholder="Price" @bind="_price" />
    <input placeholder="Seller Address" @bind="_payTo" />
    <button class="btn btn-primary" @onclick="Create">Create</button>
</div>


@if (_loading)
{
    <div class="modal show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Loading...</h5>
                </div>
                <div class="modal-body">
                    <p>Creating Listing</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string _tokenId;
    private string _price;
    private string _payTo;
    private bool _loading = false;

    private List<string> _nfts = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (!await _userService.IsInRole("Owner", await _client.TransactionHandler.GetSelectedAddress()))
            _navManager.NavigateTo("/Unauthorized");
        //var address = await _client.TransactionHandler.GetSelectedAddress();
        //var nfts = await _contract.GetAllNfts(address);
        //foreach (var id in nfts)
        //{
        //    var tokenUri = await _contract.GetTokenUri(id);
        //    var watch = JsonConvert.DeserializeObject<Watch>(await _contract.GetNftMetadata(tokenUri));
        //    string name = watch.Manufacturer + " " + watch.Model + ": " + watch.Serial;
        //    _nfts.Add(name);
        //}
        //StateHasChanged();
    }

    public async void Create()
    {
        _loading = true;
        StateHasChanged();
        var address = await _client.TransactionHandler.GetSelectedAddress();
        var tokenUri = await _contract.GetTokenUri(_tokenId);
        var watch = JsonConvert.DeserializeObject<Watch>(await _contract.GetNftMetadata(tokenUri));
        CreateListingModel model = new CreateListingModel()
        {
                PayTo = _payTo,
                Price = _price,
                TokenId = _tokenId,
                OwnerAddress = address,
                SellerAddress = _payTo,
                Watch = watch
        };
        var listingAddress = await _contract.CreateListing(model);
        AuctionMetadata metadata = new AuctionMetadata()
        {
            Id = 0,
            AuctionAddress = listingAddress,
            Views = 0
        };
        await _auctionService.CreateAuctionMetadata(metadata);
        _loading = false;
        StateHasChanged();
        _navManager.NavigateTo("/listing/" + listingAddress);
    }
}